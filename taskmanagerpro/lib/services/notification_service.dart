import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:hive/hive.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tzdata;

import '../models/notification_model.dart';

class NotificationService {
  static final _notifications = FlutterLocalNotificationsPlugin();

  /// üîπ Kh·ªüi t·∫°o th√¥ng b√°o + Hive box
  static Future<void> init() async {
    tzdata.initializeTimeZones();

    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(android: androidInit);

    await _notifications.initialize(initSettings);

    // M·ªü box Hive n·∫øu ch∆∞a m·ªü
    if (!Hive.isBoxOpen('notifications')) {
      await Hive.openBox<AppNotification>('notifications');
    }
  }

  /// üîî Hi·ªán th√¥ng b√°o ngay l·∫≠p t·ª©c (3 gi√¢y) + l∆∞u l·ªãch s·ª≠
  static Future<void> showNow({
    required String title,
    required String body,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'task_channel',
      'Task Notifications',
      channelDescription: 'Th√¥ng b√°o c·ªßa ·ª©ng d·ª•ng Task Manager Pro',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      timeoutAfter: 3000, // ‚è∞ T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
      styleInformation: BigTextStyleInformation(''), // Cho ph√©p hi·ªÉn th·ªã n·ªôi dung d√†i
    );

    final notificationId = DateTime.now().millisecondsSinceEpoch ~/ 1000;

    await _notifications.show(
      notificationId,
      title,
      body,
      const NotificationDetails(android: androidDetails),
    );

    // ‚úÖ L∆∞u v√†o l·ªãch s·ª≠
    await _saveToHistory(title: title, body: body);
  }

  /// ‚è∞ L√™n l·ªãch th√¥ng b√°o + l∆∞u l·ªãch s·ª≠
  static Future<void> schedule({
    required String title,
    required String body,
    required DateTime time,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'task_channel',
      'Task Notifications',
      channelDescription: 'Th√¥ng b√°o c√¥ng vi·ªác ƒë√£ l√™n l·ªãch',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      timeoutAfter: 3000, // ‚è∞ Hi·ªán trong 3 gi√¢y khi ƒë·∫øn gi·ªù
      styleInformation: BigTextStyleInformation(''),
    );

    await _notifications.zonedSchedule(
      time.hashCode,
      title,
      body,
      tz.TZDateTime.from(time, tz.local),
      const NotificationDetails(android: androidDetails),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
      UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );

    // ‚úÖ L∆∞u l·ªãch s·ª≠
    await _saveToHistory(title: title, body: body);
  }

  /// üíæ L∆∞u l·ªãch s·ª≠ th√¥ng b√°o v√†o Hive
  static Future<void> _saveToHistory({
    required String title,
    required String body,
  }) async {
    try {
      final box = Hive.box<AppNotification>('notifications');
      final notification = AppNotification(
        title: title,
        body: body,
        timestamp: DateTime.now(),
        read: false,
      );
      await box.add(notification);
    } catch (e) {
      // Tr√°nh crash n·∫øu Hive ch∆∞a kh·ªüi t·∫°o
      print('‚ö†Ô∏è L·ªói khi l∆∞u th√¥ng b√°o v√†o Hive: $e');
    }
  }

  /// üìú L·∫•y to√†n b·ªô l·ªãch s·ª≠ (s·∫Øp x·∫øp m·ªõi nh·∫•t l√™n ƒë·∫ßu)
  static List<AppNotification> getHistory() {
    if (!Hive.isBoxOpen('notifications')) return [];
    final box = Hive.box<AppNotification>('notifications');
    return box.values.toList().reversed.toList();
  }

  /// üóë X√≥a t·∫•t c·∫£ th√¥ng b√°o
  static Future<void> clearAll() async {
    await _notifications.cancelAll();
    if (Hive.isBoxOpen('notifications')) {
      await Hive.box<AppNotification>('notifications').clear();
    }
  }

  /// üî¢ ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
  static int getUnreadCount() {
    if (!Hive.isBoxOpen('notifications')) return 0;
    final box = Hive.box<AppNotification>('notifications');
    return box.values.where((n) => n.read == false).length;
  }
}
