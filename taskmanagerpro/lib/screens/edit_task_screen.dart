import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/task_model.dart';
import '../services/task_service.dart';

class EditTaskScreen extends StatefulWidget {
  final TaskModel? existing;
  const EditTaskScreen({super.key, this.existing});

  @override
  State<EditTaskScreen> createState() => _EditTaskScreenState();
}

class _EditTaskScreenState extends State<EditTaskScreen> {
  final _titleC = TextEditingController();
  final _descC = TextEditingController();
  final _categoryC = TextEditingController();
  final _tagsC = TextEditingController(); // nh·∫≠p d·∫°ng: work, urgent
  DateTime? _deadline;

  @override
  void initState() {
    super.initState();
    final t = widget.existing;
    if (t != null) {
      _titleC.text = t.title;
      _descC.text = t.description ?? '';
      _categoryC.text = t.category ?? '';
      _tagsC.text = t.tags.join(', ');
      _deadline = t.deadline;
    }
  }

  @override
  void dispose() {
    _titleC.dispose();
    _descC.dispose();
    _categoryC.dispose();
    _tagsC.dispose();
    super.dispose();
  }

  // üîπ Ch·ªçn ng√†y + gi·ªù deadline
  Future<void> _pickDeadline() async {
    final now = DateTime.now();
    final date = await showDatePicker(
      context: context,
      firstDate: now.subtract(const Duration(days: 365)),
      lastDate: now.add(const Duration(days: 365 * 2)),
      initialDate: _deadline ?? now,
    );
    if (date == null) return;

    final time = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.fromDateTime(_deadline ?? now),
    );
    if (time == null) return;

    setState(() {
      _deadline = DateTime(date.year, date.month, date.day, time.hour, time.minute);
    });
  }

  // üîπ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t c√¥ng vi·ªác
  Future<void> _save() async {
    if (_titleC.text.trim().isEmpty) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('‚ö†Ô∏è Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ')));
      return;
    }

    final srv = context.read<TaskService>();
    final tags = _tagsC.text
        .split(',')
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty)
        .toList();

    final now = DateTime.now();
    final category = _categoryC.text.trim().isEmpty ? null : _categoryC.text.trim();

    try {
      if (widget.existing == null) {
        // üÜï Th√™m c√¥ng vi·ªác m·ªõi
        final t = TaskModel(
          id: '_', // Firestore s·∫Ω t·ª± t·∫°o ID
          title: _titleC.text.trim(),
          description: _descC.text.trim().isEmpty ? null : _descC.text.trim(),
          deadline: _deadline,
          category: category,
          tags: tags,
          isDone: false,
          createdAt: now,
          updatedAt: now,
        );
        await srv.addTask(t);
      } else {
        // ‚úèÔ∏è C·∫≠p nh·∫≠t c√¥ng vi·ªác c≈©
        final t = widget.existing!;
        final updated = TaskModel(
          id: t.id,
          title: _titleC.text.trim(),
          description: _descC.text.trim().isEmpty ? null : _descC.text.trim(),
          deadline: _deadline,
          category: category,
          tags: tags,
          isDone: t.isDone,
          createdAt: t.createdAt,
          updatedAt: now,
        );
        await srv.updateTask(updated);
      }

      // üî∏ N·∫øu c√≥ nh·∫≠p danh m·ª•c m·ªõi th√¨ th√™m v√†o Firestore (tr√°nh tr√πng)
      if (category != null && category.isNotEmpty) {
        await srv.addCategoryIfNotExists(category);
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‚úÖ L∆∞u c√¥ng vi·ªác th√†nh c√¥ng!')),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('L·ªói khi l∆∞u: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final df = DateFormat('dd/MM/yyyy HH:mm');

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.existing == null ? 'Th√™m c√¥ng vi·ªác' : 'S·ª≠a c√¥ng vi·ªác'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            tooltip: 'L∆∞u',
            onPressed: _save,
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // Ti√™u ƒë·ªÅ
            TextField(
              controller: _titleC,
              decoration: const InputDecoration(
                labelText: 'Ti√™u ƒë·ªÅ *',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),

            // M√¥ t·∫£
            TextField(
              controller: _descC,
              maxLines: 3,
              decoration: const InputDecoration(
                labelText: 'M√¥ t·∫£',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),

            // Danh m·ª•c
            TextField(
              controller: _categoryC,
              decoration: const InputDecoration(
                labelText: 'Danh m·ª•c (VD: H·ªçc t·∫≠p, C√¥ng vi·ªác, C√° nh√¢n...)',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),

            // Tag
            TextField(
              controller: _tagsC,
              decoration: const InputDecoration(
                labelText: 'Tag (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y, VD: g·∫•p,r√† so√°t)',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),

            // Deadline
            Row(
              children: [
                Expanded(
                  child: Text(
                    _deadline == null
                        ? '‚è∞ Ch∆∞a ƒë·∫∑t h·∫°n'
                        : 'H·∫°n: ${df.format(_deadline!)}',
                  ),
                ),
                TextButton.icon(
                  onPressed: _pickDeadline,
                  icon: const Icon(Icons.calendar_today),
                  label: const Text('Ch·ªçn h·∫°n'),
                ),
              ],
            ),
            const SizedBox(height: 16),

            // N√∫t l∆∞u
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _save,
                icon: const Icon(Icons.save),
                label: const Text('L∆∞u c√¥ng vi·ªác'),
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 48),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
